# Generated by Django 5.1.7 on 2025-03-14 06:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Категория")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Описание"),
                ),
                (
                    "create_transfer",
                    models.BooleanField(
                        default=False, verbose_name="Создание перемещений"
                    ),
                ),
                (
                    "accept_transfer",
                    models.BooleanField(
                        default=False, verbose_name="Приём перемещений"
                    ),
                ),
                (
                    "accept_supply",
                    models.BooleanField(default=False, verbose_name="Приём поставок"),
                ),
                (
                    "create_inventory",
                    models.BooleanField(
                        default=False, verbose_name="Создание инвентаризации"
                    ),
                ),
                (
                    "confirm_inventory",
                    models.BooleanField(
                        default=False, verbose_name="Подтверждение инвентаризации"
                    ),
                ),
                (
                    "create_write_off",
                    models.BooleanField(
                        default=False, verbose_name="Создание списания на брак"
                    ),
                ),
                (
                    "confirm_write_off",
                    models.BooleanField(
                        default=False, verbose_name="Подтверждение списания на брак"
                    ),
                ),
                (
                    "edit_product",
                    models.BooleanField(
                        default=False, verbose_name="Редактирование товаров"
                    ),
                ),
                (
                    "create_sale",
                    models.BooleanField(default=False, verbose_name="Создание продаж"),
                ),
                (
                    "cancel_sale",
                    models.BooleanField(default=False, verbose_name="Отмена продаж"),
                ),
                (
                    "process_return",
                    models.BooleanField(
                        default=False, verbose_name="Обработка возвратов"
                    ),
                ),
                (
                    "edit_supplier",
                    models.BooleanField(
                        default=False, verbose_name="Редактирование поставщиков"
                    ),
                ),
                (
                    "manage_users",
                    models.BooleanField(
                        default=False, verbose_name="Управление пользователями"
                    ),
                ),
                (
                    "manage_roles",
                    models.BooleanField(
                        default=False,
                        verbose_name="Управление ролями и правами доступа",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="Должность")),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Имя"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Фамилия"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Телефон"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="users.category",
                        verbose_name="Категория",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.post",
                        verbose_name="Должность",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
